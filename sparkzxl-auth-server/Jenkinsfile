import groovy.json.JsonSlurper
node {
    currentBuild.result = "SUCCESS"
    echo "PWD: ${pwd()}"
    env.PRO_ENV = "prod"
    // 默认设置
    env.VERSION = '1.0.RELEASE'
    env.registryName = ''
    env.host = ''
    env.credentialsId = ''
    env.containerName = ''
    env.hostPort = 8080
    env.serverPort = 8080
    def imageName = ''
    def maven_home
    def appName = ''
    try {
        stage('config') {
            maven_home = tool 'maven-3.6.3'
            echo "Branch: ${env.BRANCH_NAME}, Environment: ${env.PRO_ENV}，maven_home：${maven_home}"
            maven_home = tool 'maven-3.6.3'
        }
        stage('Prepare') {
            echo "1.Prepare Stage"
            checkout scm
            pom = readMavenPom file: 'pom.xml'
            // 读取配置信息
            if(fileExists('sparkzxl-auth-server/config.json')) {
                def str = readFile 'sparkzxl-auth-server/config.json'
                def jsonSlurper = new JsonSlurper()
                def obj = jsonSlurper.parseText(str)

                env.registryName = obj.registryName
                appName = obj.appName
                def envConfig = obj.env[env.PRO_ENV]

                echo "envConfig: ${envConfig}"

                env.VERSION = obj.version

                env.host = envConfig.host
                env.credentialsId = envConfig.credentialsId
                env.containerName = envConfig.containerName
                env.hostPort = envConfig.hostPort
                env.serverPort = envConfig.serverPort
                imageName = "${env.registryName}/${appName}:${env.PRO_ENV}-${env.VERSION}"
                echo "VERSION: ${env.VERSION} imageName：${imageName}"
                echo "host: ${env.host} containerName: ${env.containerName} hostPort: ${env.hostPort} serverPort: ${env.serverPort}"
            }
            sh 'ls'
        }

        stage('Test') {
            echo "2.Test Stage"
        }

        stage('Build') {
            echo "3.Build Maven Docker Image Stage"
            sh "${maven_home}/bin/mvn clean package -pl sparkzxl-auth-server -am -Dmaven.test.skip=true -DsendCredentialsOverHttp=true"
        }

        stage('Deploy') {
            echo "4.Deploy Docker Image Stage"
            withCredentials([usernamePassword(credentialsId: env.credentialsId, usernameVariable: 'USER', passwordVariable: 'PWD')]) {
                def otherArgs = "-p ${env.hostPort}:${env.serverPort}" // 区分不同环境的启动参数
                def remote = [:]
                remote.name = 'ssh-deploy'
                remote.allowAnyHosts = true
                remote.host = env.host
                remote.user = USER
                remote.password = PWD
                try {
                    sshCommand remote: remote, command: "docker pull ${imageName} && docker rm -f ${env.containerName}"
                } catch (err) {

                }
                sshCommand remote: remote, command: "docker run -d --name ${env.containerName} --restart=always -e --spring.profiles.active='${env.PRO_ENV}' ${otherArgs} ${imageName}"
            }
        }
    } catch (err) {
          currentBuild.result = "FAILURE"
          throw err
    }
}
